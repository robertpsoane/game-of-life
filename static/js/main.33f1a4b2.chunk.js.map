{"version":3,"sources":["components/cell/cell.jsx","components/controls/controls.jsx","components/controls/about.jsx","components/controls/instructions.jsx","components/controls/navbar.jsx","components/gameOfLife.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","state","id","props","divId","styling","backgroundColor","onMouseDown","this","onMouseEnter","onMouseUp","life","className","style","onContextMenu","e","preventDefault","Component","Controls","showAbout","display","class","role","type","width","onClick","start","pause","reset","About","show","hide","Modal","onHide","centered","Header","Title","Body","href","Footer","instructions","NavBar","showHowTo","setState","hideAbout","hideHowTo","GameOfLife","grid","mouseDown","running","timeOut","neighbours","makeGrid","x","y","row","currentRow","col","push","height","navHeight","$","docHeight","Math","max","document","window","floor","dims","getWidthHeight","changeCell","handleMouseDown","newGrid","timeoutHandler","setTimeout","runStep","count","i","neighbour","rown","coln","oldGrid","newRow","countLivingNeighbours","living","console","log","componentDidMount","startGame","pauseGame","map","rowIdx","colIdx","cell_id","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gUAwCeA,E,4MAjCbC,MAAQ,CACNC,GAAI,EAAKC,MAAMD,GACfE,MAAO,QAAU,EAAKD,MAAMD,GAAG,GAAK,IAAM,EAAKC,MAAMD,GAAG,I,EAE1DG,QAAU,CACRC,gBAAiB,S,iDAGnB,WACE,OAAO,I,oBAGT,WAAU,IAAD,OACDC,EAAcC,KAAKL,MAAMI,YACzBE,EAAeD,KAAKL,MAAMM,aAC1BC,EAAYF,KAAKL,MAAMO,UACvBL,EAAU,CACdC,gBAAqC,SAApBE,KAAKL,MAAMQ,KAAkB,QAAU,SAE1D,OACE,qBACET,GAAIM,KAAKP,MAAMG,MACfQ,UAAU,OACVC,MAAOR,EACPE,YAAa,kBAAMA,EAAY,EAAKN,MAAMC,GAAG,GAAI,EAAKD,MAAMC,GAAG,KAC/DO,aAAc,kBAAMA,EAAa,EAAKR,MAAMC,GAAG,GAAI,EAAKD,MAAMC,GAAG,KACjEQ,UAAW,kBAAMA,KACjBI,cAAe,SAACC,GAAD,OAAOA,EAAEC,wB,GA/BbC,aCyCJC,G,kNAvCbjB,MAAQ,CAAEkB,WAAW,G,4CAErB,WACE,OACE,sBAAKN,MAAO,CAAEO,QAAS,UAAvB,UACE,qBAAIC,MAAM,uBAAuBC,KAAK,QAAtC,UACE,oBACEC,KAAK,SACLF,MAAM,kBACNR,MAAO,CAAEW,MAAO,KAChBC,QAASjB,KAAKL,MAAMuB,MAJtB,mBASA,oBACEH,KAAK,SACLF,MAAM,iBACNR,MAAO,CAAEW,MAAO,IAAKlB,gBAAiB,YACtCmB,QAASjB,KAAKL,MAAMwB,MAJtB,sBASF,oBAAIN,MAAM,uBAAuBC,KAAK,QAAtC,SACE,oBACEC,KAAK,SACLF,MAAM,oBACNR,MAAO,CAAEW,MAAO,KAChBC,QAASjB,KAAKL,MAAMyB,MAJtB,4B,GA3BaX,c,OCsERY,G,kNApEb5B,MAAQ,G,4CACR,WACE,IAAM6B,EAAOtB,KAAKL,MAAM2B,KAClBC,EAAOvB,KAAKL,MAAM4B,KACxB,OACE,eAACC,EAAA,EAAD,CAAOF,KAAMA,EAAMG,OAAQF,EAAMG,UAAQ,EAAzC,UACE,cAACF,EAAA,EAAMG,OAAP,UACE,cAACH,EAAA,EAAMI,MAAP,sBAEF,eAACJ,EAAA,EAAMK,KAAP,WACE,oBAAGhB,MAAM,cAAT,wCAC6B,sCAD7B,mBAC2D,IACzD,oBAAGiB,KAAK,mDAAR,UACG,IADH,iBAFF,0EAQE,+BACE,sFACA,mFACA,2EACA,+FAIJ,sBAAKjB,MAAM,cAAX,UACE,uBACA,yEAC2C,IACzC,mBAAGiB,KAAK,wDAAR,4BAFF,OAOA,2HAE0B,IACxB,mBAAGA,KAAK,+CAAR,oBAHF,qCAImC,IACjC,mBAAGA,KAAK,iCAAR,4BALF,OAOA,uBACA,4FAC8D,IAC5D,mBAAGA,KAAK,kDAAR,kBAFF,OAKA,qBAAKjB,MAAM,sBAAsBC,KAAK,QAAtC,+DAKJ,cAACU,EAAA,EAAMO,OAAP,UACE,wBACEhB,KAAK,SACLF,MAAM,kBACNR,MAAO,CAAEW,MAAO,KAChBC,QAASM,EAJX,4B,GAvDUd,cCgDLuB,E,4MA/CbvC,MAAQ,G,4CACR,WACE,IAAM6B,EAAOtB,KAAKL,MAAM2B,KAClBC,EAAOvB,KAAKL,MAAM4B,KACxB,OACE,eAACC,EAAA,EAAD,CAAOF,KAAMA,EAAMG,OAAQF,EAAMG,UAAQ,EAAzC,UACE,cAACF,EAAA,EAAMG,OAAP,UACE,cAACH,EAAA,EAAMI,MAAP,6BAEF,sBAAKf,MAAM,qBAAqBC,KAAK,QAArC,kGAEuB,IACrB,mBAAGgB,KAAK,0CAAR,kBAHF,OAKA,eAACN,EAAA,EAAMK,KAAP,WACE,+BACE,uFACA,yGAIA,wCACQ,yCADR,uBAC8C,yCAD9C,0BAEqB,yCAFrB,sBAE2D,UAI7D,qBAAKhB,MAAM,sBAAsBC,KAAK,QAAtC,6FAKF,cAACU,EAAA,EAAMO,OAAP,UACE,wBACEhB,KAAK,SACLF,MAAM,kBACNR,MAAO,CAAEW,MAAO,KAChBC,QAASM,EAJX,yB,GAlCiBd,aC4EZwB,E,4MA1EbxC,MAAQ,CAAEkB,WAAW,EAAOuB,WAAW,G,+CAEvC,WACElC,KAAKmC,SAAS,CAAExB,WAAW,M,uBAG7B,WACEX,KAAKmC,SAAS,CAAExB,WAAW,M,uBAG7B,WACEX,KAAKmC,SAAS,CAAED,WAAW,M,uBAG7B,WACElC,KAAKmC,SAAS,CAAED,WAAW,M,oBAG7B,WAAU,IAAD,OACP,OACE,gCACE,qBAAKxC,GAAG,SAASmB,MAAM,iCAAvB,SACE,qBAAKA,MAAM,eAAX,SACE,sBAAKA,MAAM,eAAX,UACE,oBAAIR,MAAO,CAAEO,QAAS,UAAtB,mCACA,cAAC,EAAD,CACEQ,MAAOpB,KAAKL,MAAMyB,MAClBF,MAAOlB,KAAKL,MAAMuB,MAClBC,MAAOnB,KAAKL,MAAMwB,QAGpB,qBAAIN,MAAM,uBAAuBC,KAAK,QAAtC,UACE,oBACEC,KAAK,SACLF,MAAM,oBACNR,MAAO,CAAEW,MAAO,KAChBC,QAAS,WACP,EAAKiB,aALT,oBAUA,oBACEnB,KAAK,SACLF,MAAM,oBACNR,MAAO,CAAEW,MAAO,KAChBC,QAAS,WACP,EAAKN,aALT,6BAeR,cAAC,EAAD,CACEW,KAAMtB,KAAKP,MAAMkB,UACjBY,KAAM,WACJ,EAAKa,eAGT,cAAC,EAAD,CACEd,KAAMtB,KAAKP,MAAMyC,UACjBX,KAAM,WACJ,EAAKc,sB,GAnEI5B,a,yBC4NN6B,E,4MApNb7C,MAAQ,CACN8C,KAAM,GACNC,WAAW,EACXC,SAAS,EACTC,QAAS,IACTC,WAAY,CACV,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,K,EA0DRC,SAAW,SAACC,EAAGC,GAGb,IADA,IAAMP,EAAO,GACJQ,EAAM,EAAGA,EAAMD,EAAGC,IAAO,CAEhC,IADA,IAAMC,EAAa,GACVC,EAAM,EAAGA,EAAMJ,EAAGI,IACzBD,EAAWE,KAAK,CAAC,IAEnBX,EAAKW,KAAKF,GAEZ,OAAOT,G,oDAhET,WACE,IAAIY,EAEEC,EAAYC,IAAE,WAAWF,SACzBG,EAAYC,KAAKC,IAAIH,IAAEI,UAAUN,SAAUE,IAAEK,QAAQP,UAQ3D,OANAA,EAASI,KAAKI,OAAOL,EAAYF,GA9BpB,IA8B6C,EAMnD,CAHLG,KAAKI,MAAMJ,KAAKC,IAAIH,IAAEI,UAAUzC,QAASqC,IAAEK,QAAQ1C,SAjCxC,IAkCX,EAEamC,K,+BAGjB,WAGE,IAAMS,EAAO5D,KAAK6D,iBACZtB,EAAOvC,KAAK4C,SAASgB,EAAK,GAAIA,EAAK,IACzC5D,KAAKmC,SAAS,CAAEI,KAAMA,EAAMC,WAAW,EAAOC,SAAS,M,6BAGzD,SAAgBM,EAAKE,GAGnBjD,KAAKmC,SAAS,CAAEK,WAAW,EAAMD,KAAMvC,KAAK8D,WAAWf,EAAKE,O,2BAG9D,WAEEjD,KAAKmC,SAAS,CAAEK,WAAW,M,8BAG7B,SAAiBO,EAAKE,GAEfjD,KAAKP,MAAM+C,WAChBxC,KAAK+D,gBAAgBhB,EAAKE,K,wBAG5B,SAAWF,EAAKE,GAId,IAAIe,EAAUhE,KAAKP,MAAM8C,KAOzB,OAL6B,IAAzByB,EAAQjB,GAAKE,GAAK,GACpBe,EAAQjB,GAAKE,GAAK,GAAK,EAEvBe,EAAQjB,GAAKE,GAAK,GAAK,EAElBe,I,uBAgBT,WAAa,IAAD,OAKVhE,KAAKmC,SAAS,CAAEM,SAAS,IACzBzC,KAAKiE,eAAiBP,OAAOQ,YAAW,WACtC,EAAKC,YACJnE,KAAKP,MAAMiD,W,uBAGhB,WAEE1C,KAAKmC,SAAS,CAAEM,SAAS,M,mCAG3B,SAAsBF,EAAMQ,EAAKE,GAO/B,IAHA,IAAMW,EAAO5D,KAAK6D,iBACZlB,EAAa3C,KAAKP,MAAMkD,WAC1ByB,EAAQ,EACHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAY3B,EAAW0B,GACvBE,EAAOxB,EAAMuB,EAAU,GACvBE,EAAOvB,EAAMqB,EAAU,GACzBC,EAAO,GAAKC,EAAO,GAAKD,EAAOX,EAAK,IAAMY,EAAOZ,EAAK,IAC5B,IAAxBrB,EAAKgC,GAAMC,GAAM,IACnBJ,IAIN,OAAOA,I,qBAGT,WAAW,IAAD,OAOR,GAAKpE,KAAKP,MAAMgD,QAAhB,CAOA,IAJA,IAAMmB,EAAO5D,KAAK6D,iBACdY,EAAUzE,KAAKP,MAAM8C,KACrByB,EAAU,GAELjB,EAAM,EAAGA,EAAMa,EAAK,GAAIb,IAAO,CAEtC,IADA,IAAI2B,EAAS,GACJzB,EAAM,EAAGA,EAAMW,EAAK,GAAIX,IAC/B,GAA6B,IAAzBwB,EAAQ1B,GAAKE,GAAK,GACkC,IAAlDjD,KAAK2E,sBAAsBF,EAAS1B,EAAKE,GAC3CyB,EAAOxB,KAAK,CAAC,IAEbwB,EAAOxB,KAAK,CAAC,QAEV,CACL,IAAM0B,EAAS5E,KAAK2E,sBAAsBF,EAAS1B,EAAKE,GAExC,IAAX2B,EAA4B,IAAXA,EACpBF,EAAOxB,KAAK,CAAC,IAEbwB,EAAOxB,KAAK,CAAC,IAInBc,EAAQd,KAAKwB,GAEf1E,KAAKmC,SAAS,CAAEI,KAAMyB,IAEtBhE,KAAKiE,eAAiBP,OAAOQ,YAAW,WACtCW,QAAQC,IAAI,EAAKrF,MAAM8C,MACvB,EAAK4B,YACJnE,KAAKP,MAAMiD,Y,oBAGhB,WAAU,IAAD,OAECH,EAASvC,KAAKP,MAAd8C,KACR,OACE,gCAEE,iCACE,cAAC,EAAD,CACEnB,MAAO,kBAAM,EAAK2D,qBAClB7D,MAAO,kBAAM,EAAK8D,aAClB7D,MAAO,kBAAM,EAAK8D,iBAMtB,qBAAK7E,UAAU,QAAf,SACGmC,EAAK2C,KAAI,SAACnC,EAAKoC,GACd,OACE,qBAAkB/E,UAAU,UAA5B,SACG2C,EAAImC,KAAI,SAACjC,EAAKmC,GACb,IAAMC,EAAU,CAACF,EAAQC,GAGnBjF,EACmC,IAAvC,EAAKV,MAAM8C,KAAK4C,GAAQC,GAAQ,GAAW,QAAU,OAEvD,OACE,cAAC,EAAD,CAEE1F,GAAI2F,EACJlF,KAAMA,EACNJ,YAAa,SAACgD,EAAKE,GAAN,OAAc,EAAKc,gBAAgBhB,EAAKE,IACrDhD,aAAc,SAAC8C,EAAKE,GAAN,OACZ,EAAKqC,iBAAiBvC,EAAKE,IAE7B/C,UAAW,SAAC6C,EAAKE,GAAN,OAAc,EAAKsC,kBAPzBF,OAVHF,e,GA3LC1E,aCQV+E,E,4MAVb/F,MAAQ,G,4CACR,WACE,OACE,qBAAKW,UAAU,MAAf,SACE,cAAC,EAAD,U,GALUK,aCOHgF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAAS4C,eAAe,SAM1BZ,M","file":"static/js/main.33f1a4b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./cell.css\";\n\nclass Cell extends Component {\n  /** Cell - represents a cell on the board.  Coloured based on\n   * property for life passed in\n   */\n  state = {\n    id: this.props.id,\n    divId: \"cell:\" + this.props.id[0] + \",\" + this.props.id[1],\n  };\n  styling = {\n    backgroundColor: \"black\",\n  };\n\n  contextMenu() {\n    return false;\n  }\n\n  render() {\n    const onMouseDown = this.props.onMouseDown;\n    const onMouseEnter = this.props.onMouseEnter;\n    const onMouseUp = this.props.onMouseUp;\n    const styling = {\n      backgroundColor: this.props.life === \"dead\" ? \"black\" : \"white\",\n    };\n    return (\n      <div\n        id={this.state.divId}\n        className=\"cell\"\n        style={styling}\n        onMouseDown={() => onMouseDown(this.state.id[0], this.state.id[1])}\n        onMouseEnter={() => onMouseEnter(this.state.id[0], this.state.id[1])}\n        onMouseUp={() => onMouseUp()}\n        onContextMenu={(e) => e.preventDefault()}\n      ></div>\n    );\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport \"./controls.css\";\n\nclass Controls extends Component {\n  /** Set of control buttons, each are passed a function call via props */\n  state = { showAbout: false };\n\n  render() {\n    return (\n      <div style={{ display: \"inline\" }}>\n        <ul class=\"btn-group controller\" role=\"group\">\n          <li\n            type=\"button\"\n            class=\"btn btn-success\"\n            style={{ width: 100 }}\n            onClick={this.props.start}\n          >\n            Start\n          </li>\n\n          <li\n            type=\"button\"\n            class=\"btn btn-danger\"\n            style={{ width: 100, backgroundColor: \"dark-red\" }}\n            onClick={this.props.pause}\n          >\n            Pause\n          </li>\n        </ul>\n        <ul class=\"btn-group controller\" role=\"group\">\n          <li\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            style={{ width: 100 }}\n            onClick={this.props.reset}\n          >\n            Reset\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass About extends Component {\n  state = {};\n  render() {\n    const show = this.props.show;\n    const hide = this.props.hide;\n    return (\n      <Modal show={show} onHide={hide} centered>\n        <Modal.Header>\n          <Modal.Title>About</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p class=\"mini-margin\">\n            Conway's Game of Life (aka <em>Life</em>) was created by{\" \"}\n            <a href=\"https://en.wikipedia.org/wiki/John_Horton_Conway\">\n              {\" \"}\n              John Conway\n            </a>\n            . The idea is to simulate life in a 2d grid with a set of simple\n            rules:\n            <ol>\n              <li>A live cell with less than 2 living neighbours dies.</li>\n              <li>A live cell with 2 or 3 live neighbours survives.</li>\n              <li>A live cell with 4+ live neighbours dies.</li>\n              <li>A dead cell with 3 live neighbours comes back to life. </li>\n            </ol>\n          </p>\n\n          <div class=\"mini-margin\">\n            <hr />\n            <p>\n              To find out more about the game, see the{\" \"}\n              <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">\n                Wikipedia Page\n              </a>\n              .\n            </p>\n            <p>\n              This was produced by Robert Soane to get exposure to React JS. You\n              can find the code on my{\" \"}\n              <a href=\"https://github.com/robertpsoane/game-of-life\">GitHub</a>.\n              To see more of my work, checkout{\" \"}\n              <a href=\"https://robertpsoane.github.io\">robertsoane.me</a>.\n            </p>\n            <hr />\n            <p>\n              The original simpler version of this React app can be found{\" \"}\n              <a href=\"https://robertpsoane.github.io/game-of-life-v1/\">here</a>\n              .\n            </p>\n            <div class=\"alert alert-warning\" role=\"alert\">\n              Note: This is currently a work in progress.\n            </div>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            style={{ width: 100 }}\n            onClick={hide}\n          >\n            Close\n          </button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass instructions extends Component {\n  state = {};\n  render() {\n    const show = this.props.show;\n    const hide = this.props.hide;\n    return (\n      <Modal show={show} onHide={hide} centered>\n        <Modal.Header>\n          <Modal.Title>Instructions</Modal.Title>\n        </Modal.Header>\n        <div class=\"alert alert-danger\" role=\"alert\">\n          Note: This version is currently under construction. The original\n          version can be found{\" \"}\n          <a href=\"https://robertsoane.me/game-of-life-v1/\">here</a>.\n        </div>\n        <Modal.Body>\n          <ul>\n            <li>Click on the cells in the grid to switch their state.</li>\n            <li>\n              Black cells represent dead cells, and white cells represent alive\n              cells\n            </li>\n            <li>\n              Click <code>Start</code> to start the game, <code>Pause</code> to\n              stop the game, and <code>Reset</code> to reset the board{\" \"}\n            </li>\n          </ul>\n\n          <div class=\"alert alert-warning\" role=\"alert\">\n            These instructions can be brought up again by clicking on the How-To\n            button.\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            style={{ width: 100 }}\n            onClick={hide}\n          >\n            Ok\n          </button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default instructions;\n","import React, { Component } from \"react\";\nimport Controls from \"./controls\";\nimport About from \"./about\";\nimport Instructions from \"./instructions\";\n\nclass NavBar extends Component {\n  state = { showAbout: false, showHowTo: true };\n\n  showAbout() {\n    this.setState({ showAbout: true });\n  }\n\n  hideAbout() {\n    this.setState({ showAbout: false });\n  }\n\n  showHowTo() {\n    this.setState({ showHowTo: true });\n  }\n\n  hideHowTo() {\n    this.setState({ showHowTo: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <nav id=\"navBar\" class=\"navbar  navbar-dark bg-primary\">\n          <div class=\"container-md\">\n            <div class=\"navbar-brand\">\n              <h3 style={{ display: \"inline\" }}>Conway's Game of Life</h3>\n              <Controls\n                reset={this.props.reset}\n                start={this.props.start}\n                pause={this.props.pause}\n              />\n\n              <ul class=\"btn-group controller\" role=\"group\">\n                <li\n                  type=\"button\"\n                  class=\"btn btn-secondary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    this.showHowTo();\n                  }}\n                >\n                  How-to\n                </li>\n                <li\n                  type=\"button\"\n                  class=\"btn btn-secondary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    this.showAbout();\n                  }}\n                >\n                  About\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n        {/** Modals go here */}\n        <About\n          show={this.state.showAbout}\n          hide={() => {\n            this.hideAbout();\n          }}\n        />\n        <Instructions\n          show={this.state.showHowTo}\n          hide={() => {\n            this.hideHowTo();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Cell from \"./cell/cell\";\nimport Navbar from \"./controls/navbar\";\nimport \"./gameOfLife.css\";\nimport $ from \"jquery\";\n\nconst GRIDSIZE = 25;\n\nclass GameOfLife extends Component {\n  /** Main entry point to the app. */\n\n  // Maintains state of grid, timeout, whether game is running and\n  // whether mouse button currently down\n  state = {\n    grid: [],\n    mouseDown: false,\n    running: false,\n    timeOut: 250,\n    neighbours: [\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, -1],\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n    ],\n  };\n\n  getWidthHeight() {\n    let height;\n    let width;\n    const navHeight = $(\"#navBar\").height();\n    const docHeight = Math.max($(document).height(), $(window).height());\n\n    height = Math.floor((docHeight - navHeight) / GRIDSIZE) - 1;\n\n    width =\n      Math.floor(Math.max($(document).width(), $(window).width()) / GRIDSIZE) -\n      1;\n\n    return [width, height];\n  }\n\n  componentDidMount() {\n    /** Runs on load.  Creates grid and sets initial states.  Also used for\n     * resetting app  */\n    const dims = this.getWidthHeight();\n    const grid = this.makeGrid(dims[0], dims[1]);\n    this.setState({ grid: grid, mouseDown: false, running: false });\n  }\n\n  handleMouseDown(row, col) {\n    /** Called by cells when clicked - sets mouseDown to true and starts\n     * to change state */\n    this.setState({ mouseDown: true, grid: this.changeCell(row, col) });\n  }\n\n  handleMouseUp() {\n    /** Sets mouseDown false when mouse button released */\n    this.setState({ mouseDown: false });\n  }\n\n  handleMouseEnter(row, col) {\n    /** Called when mouse over a cell.  If mouse is down, then 'clicks' cell */\n    if (!this.state.mouseDown) return;\n    this.handleMouseDown(row, col);\n  }\n\n  changeCell(row, col) {\n    /** Takes a cell and flips value from alive to dead and vice\n     * versa */\n\n    let newGrid = this.state.grid;\n    // updates grid switching value of element\n    if (newGrid[row][col][0] === 0) {\n      newGrid[row][col][0] = 1;\n    } else {\n      newGrid[row][col][0] = 0;\n    }\n    return newGrid;\n  }\n\n  makeGrid = (x, y) => {\n    /** Produces a grid of dead cells with x columns and y rows */\n    const grid = [];\n    for (let row = 0; row < y; row++) {\n      const currentRow = [];\n      for (let col = 0; col < x; col++) {\n        currentRow.push([0]);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  startGame() {\n    /** Starts running game:\n     * - Sets running state to true\n     * - Sets timeout to run a step after the timeout\n     */\n    this.setState({ running: true });\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runStep();\n    }, this.state.timeOut);\n  }\n\n  pauseGame() {\n    /** Stops running game */\n    this.setState({ running: false });\n  }\n\n  countLivingNeighbours(grid, row, col) {\n    /** Counts number of direct neighbours to a cell that are alive on\n     * a given grid.  Uses neighbours vector to store al permutations\n     */\n    const dims = this.getWidthHeight();\n    const neighbours = this.state.neighbours;\n    let count = 0;\n    for (let i = 0; i < 8; i++) {\n      const neighbour = neighbours[i];\n      const rown = row + neighbour[0];\n      const coln = col + neighbour[1];\n      if (rown > 0 && coln > 0 && rown < dims[1] && coln < dims[0]) {\n        if (grid[rown][coln][0] === 1) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  runStep() {\n    /** Runs a generation of the Game of Life\n     * - Checks if running\n     * - Iterates over grid, building the grid for the next generation\n     * based on rules of game of life\n     * - Sets a timeout to run again\n     */\n    if (!this.state.running) {\n      return;\n    }\n    const dims = this.getWidthHeight();\n    let oldGrid = this.state.grid;\n    let newGrid = [];\n\n    for (let row = 0; row < dims[1]; row++) {\n      let newRow = [];\n      for (let col = 0; col < dims[0]; col++) {\n        if (oldGrid[row][col][0] === 0) {\n          if (this.countLivingNeighbours(oldGrid, row, col) === 3) {\n            newRow.push([1]);\n          } else {\n            newRow.push([0]);\n          }\n        } else {\n          const living = this.countLivingNeighbours(oldGrid, row, col);\n\n          if ((living === 2) | (living === 3)) {\n            newRow.push([1]);\n          } else {\n            newRow.push([0]);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    this.setState({ grid: newGrid });\n\n    this.timeoutHandler = window.setTimeout(() => {\n      console.log(this.state.grid);\n      this.runStep();\n    }, this.state.timeOut);\n  }\n\n  render() {\n    /** render function - renders game of life on screen */\n    const { grid } = this.state;\n    return (\n      <div>\n        {/* Adding header component with Game of Life info */}\n        <header>\n          <Navbar\n            reset={() => this.componentDidMount()}\n            start={() => this.startGame()}\n            pause={() => this.pauseGame()}\n          />\n        </header>\n        {/* Adding controls to grid board */}\n\n        {/* Render grid of divs representing our board */}\n        <div className=\"board\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx} className=\"cellrow\">\n                {row.map((col, colIdx) => {\n                  const cell_id = [rowIdx, colIdx];\n                  // Passes life prop to div based on value of element\n                  // on grid array\n                  const life =\n                    this.state.grid[rowIdx][colIdx][0] === 1 ? \"alive\" : \"dead\";\n\n                  return (\n                    <Cell\n                      key={cell_id}\n                      id={cell_id}\n                      life={life}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp()}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameOfLife;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\n\nimport GameOfLife from \"./components/gameOfLife\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"App\">\n        <GameOfLife />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}